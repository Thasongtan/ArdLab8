
Ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d4  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e6  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <fWDTInit>:
#include "util/delay.h"
#define LED0 PB0
#define LED1 PB1
#define WDT_RESET asm("WDR \n") // Inline assembly instr
void fWDTInit(void) {
	cli(); // Global intr disabled
  80:	f8 94       	cli
	// Reset watchdog timer
	WDT_RESET;
  82:	a8 95       	wdr
	// Start timed sequence
	WDTCSR |= (1<<WDCE) | (1<<WDE);
  84:	e0 e6       	ldi	r30, 0x60	; 96
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	88 61       	ori	r24, 0x18	; 24
  8c:	80 83       	st	Z, r24
	// Set WDT prescaler
	WDTCSR = (1<<WDE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP0);
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	80 83       	st	Z, r24
  92:	08 95       	ret

00000094 <main>:
}
int main(void) {
	uint8_t i;
	DDRB |= (1<<LED1)|(1<<LED0);
  94:	84 b1       	in	r24, 0x04	; 4
  96:	83 60       	ori	r24, 0x03	; 3
  98:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<LED0);
  9a:	28 9a       	sbi	0x05, 0	; 5
	fWDTInit();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <fWDTInit>
	while (1) {
		PORTB ^= (1<<LED1)|(1<<LED0); // Toggling LEDs
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	89 27       	eor	r24, r25
  a6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	36 e2       	ldi	r19, 0x26	; 38
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x24>
  b8:	00 00       	nop
		_delay_ms(126);
		WDT_RESET; // Reset watchdog timer
  ba:	a8 95       	wdr
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	36 e2       	ldi	r19, 0x26	; 38
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x38>
  cc:	00 00       	nop
		_delay_ms(126);
		WDT_RESET; // Reset watchdog timer
  ce:	a8 95       	wdr
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	36 e2       	ldi	r19, 0x26	; 38
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x42>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4c>
  e0:	00 00       	nop
		_delay_ms(126);
		WDT_RESET; // Reset watchdog timer
  e2:	a8 95       	wdr
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	36 e2       	ldi	r19, 0x26	; 38
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x56>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x60>
  f4:	00 00       	nop
		_delay_ms(126);
		WDT_RESET; // Reset watchdog timer
  f6:	a8 95       	wdr
  f8:	d4 cf       	rjmp	.-88     	; 0xa2 <main+0xe>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
