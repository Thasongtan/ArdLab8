
Ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000767  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c4  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <fSleep>:
#define LED0 PB0
#define LED1 PB1
#define LED2 PB5
void fSleep(void) {
	// Enter sleep mode -------------
	cli(); // Global intr disabled
  80:	f8 94       	cli
	SMCR |= (1<<SM1); // Set Power down mode
  82:	83 b7       	in	r24, 0x33	; 51
  84:	84 60       	ori	r24, 0x04	; 4
  86:	83 bf       	out	0x33, r24	; 51
	SMCR |= (1<<SE); // Enable sleep
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	83 bf       	out	0x33, r24	; 51
	sei(); // Global intr enabled
  8e:	78 94       	sei
	asm("sleep \n"); // Sleep now (inline sleep instr)
  90:	88 95       	sleep
	// Now wake up -----------------
	SMCR &= ~(1<<SE); // Disable sleep
  92:	83 b7       	in	r24, 0x33	; 51
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	83 bf       	out	0x33, r24	; 51
  98:	08 95       	ret

0000009a <fBlink>:
}
void fBlink(void) { // Blinking LEDs
  9a:	95 e0       	ldi	r25, 0x05	; 5
	uint8_t i;
	for (i=0;i<5;i++) {
		PORTB ^= (1<<LED1)|(1<<LED0);
  9c:	23 e0       	ldi	r18, 0x03	; 3
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	82 27       	eor	r24, r18
  a2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	3f ef       	ldi	r19, 0xFF	; 255
  a6:	49 e6       	ldi	r20, 0x69	; 105
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	31 50       	subi	r19, 0x01	; 1
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <fBlink+0x10>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <fBlink+0x1a>
  b4:	00 00       	nop
  b6:	91 50       	subi	r25, 0x01	; 1
	// Now wake up -----------------
	SMCR &= ~(1<<SE); // Disable sleep
}
void fBlink(void) { // Blinking LEDs
	uint8_t i;
	for (i=0;i<5;i++) {
  b8:	91 f7       	brne	.-28     	; 0x9e <fBlink+0x4>
		PORTB ^= (1<<LED1)|(1<<LED0);
		_delay_ms(500);
	}
}
  ba:	08 95       	ret

000000bc <main>:
int main(void) {
	// PORTs -----------------------
	DDRB |= (1<<LED2)|(1<<LED1)|(1<<LED0);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	83 62       	ori	r24, 0x23	; 35
  c0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<LED1);
  c2:	29 9a       	sbi	0x05, 1	; 5
	PORTD |= (1<<SW);
  c4:	5a 9a       	sbi	0x0b, 2	; 11
	// INT0 ------------------------
	EICRA |= (1<<ISC01); // Falling edge for INT0
  c6:	e9 e6       	ldi	r30, 0x69	; 105
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); // Enable INT0
  d0:	e8 9a       	sbi	0x1d, 0	; 29
	while (1) {
		fBlink(); // Blinking LED1 & LED0
  d2:	0e 94 4d 00 	call	0x9a	; 0x9a <fBlink>
		fSleep(); // Sleeping
  d6:	0e 94 40 00 	call	0x80	; 0x80 <fSleep>
  da:	fb cf       	rjmp	.-10     	; 0xd2 <main+0x16>

000000dc <__vector_1>:
	}
}
ISR(INT0_vect) { // INT0's ISR
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	PORTB ^= (1<<LED2);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	89 27       	eor	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
